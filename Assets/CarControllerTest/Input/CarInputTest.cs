//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/CarControllerTest/Input/CarInputTest.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace CarControllerTest.Inpt
{
    public partial class @CarInputTest: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @CarInputTest()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""CarInputTest"",
    ""maps"": [
        {
            ""name"": ""RaceControl"",
            ""id"": ""7fb232ec-79a3-418d-8a60-d447b1754c02"",
            ""actions"": [
                {
                    ""name"": ""brake"",
                    ""type"": ""Button"",
                    ""id"": ""0b1a4cd7-71dc-4cb3-8318-1d385cffe7b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""drift"",
                    ""type"": ""Button"",
                    ""id"": ""c9f6b54e-2fa9-42a7-905b-38777cb7e6a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""speedup"",
                    ""type"": ""Button"",
                    ""id"": ""8986ffc4-5244-48eb-9ae6-0030b5e64d41"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""moveH"",
                    ""type"": ""Value"",
                    ""id"": ""0227d5b9-2700-4c0d-bb51-138865a730d0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""moveV"",
                    ""type"": ""Value"",
                    ""id"": ""9e6a393d-08d0-40fb-ac22-25dfcbf2a3c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2a88b6ec-d1ac-440e-9d56-afa60998534b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af467343-2fae-4825-a3ff-443e4ccf2abf"",
                    ""path"": ""<XInputController>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f64cf190-cbba-4508-8aea-824e66c58c64"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""speedup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c43d4994-8115-44bd-bd18-efed0504cf38"",
                    ""path"": ""<XInputController>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""speedup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad9e47cd-2477-4e67-a15e-96c30800c244"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""drift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a9bf8ed-a61d-4443-bea5-315af9d63169"",
                    ""path"": ""<XInputController>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""drift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""49426e37-399a-4a03-9816-96150efa4554"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveH"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d0819c22-006b-493f-87d4-3a74dcf00f91"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveH"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1bf8e1ff-e3c1-4450-b66b-610105cd0a9d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveH"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""11fda02f-4324-4fad-8fcf-41b5953b053a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveH"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""64def2a7-3650-408c-8fa2-302e1afe0da2"",
                    ""path"": ""<XInputController>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveH"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3118ce2e-1e6a-4445-9826-7db175611b99"",
                    ""path"": ""<XInputController>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveH"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""9e6ae2d7-f98c-4bf5-8f42-0085415d845f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveV"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""060289ff-57b3-4399-9117-af6b44cc80d4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveV"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0793a382-1004-48be-b20d-a187db810310"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveV"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""dd2380f7-7474-4af5-ac2c-e71ca52f0d1d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveV"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""83c64437-ea6e-4da9-b371-fcebef3aa209"",
                    ""path"": ""<XInputController>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveV"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""83fe6bac-c765-40e1-8b5d-ff175c21eca2"",
                    ""path"": ""<XInputController>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveV"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""RaceControl"",
            ""bindingGroup"": ""RaceControl"",
            ""devices"": []
        }
    ]
}");
            // RaceControl
            m_RaceControl = asset.FindActionMap("RaceControl", throwIfNotFound: true);
            m_RaceControl_brake = m_RaceControl.FindAction("brake", throwIfNotFound: true);
            m_RaceControl_drift = m_RaceControl.FindAction("drift", throwIfNotFound: true);
            m_RaceControl_speedup = m_RaceControl.FindAction("speedup", throwIfNotFound: true);
            m_RaceControl_moveH = m_RaceControl.FindAction("moveH", throwIfNotFound: true);
            m_RaceControl_moveV = m_RaceControl.FindAction("moveV", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // RaceControl
        private readonly InputActionMap m_RaceControl;
        private List<IRaceControlActions> m_RaceControlActionsCallbackInterfaces = new List<IRaceControlActions>();
        private readonly InputAction m_RaceControl_brake;
        private readonly InputAction m_RaceControl_drift;
        private readonly InputAction m_RaceControl_speedup;
        private readonly InputAction m_RaceControl_moveH;
        private readonly InputAction m_RaceControl_moveV;
        public struct RaceControlActions
        {
            private @CarInputTest m_Wrapper;
            public RaceControlActions(@CarInputTest wrapper) { m_Wrapper = wrapper; }
            public InputAction @brake => m_Wrapper.m_RaceControl_brake;
            public InputAction @drift => m_Wrapper.m_RaceControl_drift;
            public InputAction @speedup => m_Wrapper.m_RaceControl_speedup;
            public InputAction @moveH => m_Wrapper.m_RaceControl_moveH;
            public InputAction @moveV => m_Wrapper.m_RaceControl_moveV;
            public InputActionMap Get() { return m_Wrapper.m_RaceControl; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(RaceControlActions set) { return set.Get(); }
            public void AddCallbacks(IRaceControlActions instance)
            {
                if (instance == null || m_Wrapper.m_RaceControlActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_RaceControlActionsCallbackInterfaces.Add(instance);
                @brake.started += instance.OnBrake;
                @brake.performed += instance.OnBrake;
                @brake.canceled += instance.OnBrake;
                @drift.started += instance.OnDrift;
                @drift.performed += instance.OnDrift;
                @drift.canceled += instance.OnDrift;
                @speedup.started += instance.OnSpeedup;
                @speedup.performed += instance.OnSpeedup;
                @speedup.canceled += instance.OnSpeedup;
                @moveH.started += instance.OnMoveH;
                @moveH.performed += instance.OnMoveH;
                @moveH.canceled += instance.OnMoveH;
                @moveV.started += instance.OnMoveV;
                @moveV.performed += instance.OnMoveV;
                @moveV.canceled += instance.OnMoveV;
            }

            private void UnregisterCallbacks(IRaceControlActions instance)
            {
                @brake.started -= instance.OnBrake;
                @brake.performed -= instance.OnBrake;
                @brake.canceled -= instance.OnBrake;
                @drift.started -= instance.OnDrift;
                @drift.performed -= instance.OnDrift;
                @drift.canceled -= instance.OnDrift;
                @speedup.started -= instance.OnSpeedup;
                @speedup.performed -= instance.OnSpeedup;
                @speedup.canceled -= instance.OnSpeedup;
                @moveH.started -= instance.OnMoveH;
                @moveH.performed -= instance.OnMoveH;
                @moveH.canceled -= instance.OnMoveH;
                @moveV.started -= instance.OnMoveV;
                @moveV.performed -= instance.OnMoveV;
                @moveV.canceled -= instance.OnMoveV;
            }

            public void RemoveCallbacks(IRaceControlActions instance)
            {
                if (m_Wrapper.m_RaceControlActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IRaceControlActions instance)
            {
                foreach (var item in m_Wrapper.m_RaceControlActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_RaceControlActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public RaceControlActions @RaceControl => new RaceControlActions(this);
        private int m_RaceControlSchemeIndex = -1;
        public InputControlScheme RaceControlScheme
        {
            get
            {
                if (m_RaceControlSchemeIndex == -1) m_RaceControlSchemeIndex = asset.FindControlSchemeIndex("RaceControl");
                return asset.controlSchemes[m_RaceControlSchemeIndex];
            }
        }
        public interface IRaceControlActions
        {
            void OnBrake(InputAction.CallbackContext context);
            void OnDrift(InputAction.CallbackContext context);
            void OnSpeedup(InputAction.CallbackContext context);
            void OnMoveH(InputAction.CallbackContext context);
            void OnMoveV(InputAction.CallbackContext context);
        }
    }
}
